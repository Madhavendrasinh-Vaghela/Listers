{"ast":null,"code":"var _jsxFileName = \"C:\\\\JS\\\\my-list\\\\frontend\\\\src\\\\components\\\\PrivateRoute.js\",\n  _s = $RefreshSig$();\n// src/components/PrivateRoute.js\n\nimport React, { useContext } from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { AuthContext } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = () => {\n  _s();\n  const {\n    token,\n    loading\n  } = useContext(AuthContext);\n  if (loading) {\n    // Optional: show a loading spinner while checking for token\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If there's a token, show the protected content (Outlet)\n  // Otherwise, redirect to the login page\n  return token ? /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 18\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 31\n  }, this);\n};\n_s(PrivateRoute, \"Pk08UiT2L64HsmlkvhkkPwM5adg=\");\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","useContext","Navigate","Outlet","AuthContext","jsxDEV","_jsxDEV","PrivateRoute","_s","token","loading","children","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/JS/my-list/frontend/src/components/PrivateRoute.js"],"sourcesContent":["// src/components/PrivateRoute.js\n\nimport React, { useContext } from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { AuthContext } from '../context/AuthContext';\n\nconst PrivateRoute = () => {\n  const { token, loading } = useContext(AuthContext);\n\n  if (loading) {\n    // Optional: show a loading spinner while checking for token\n    return <div>Loading...</div>;\n  }\n\n  // If there's a token, show the protected content (Outlet)\n  // Otherwise, redirect to the login page\n  return token ? <Outlet /> : <Navigate to=\"/login\" />;\n};\n\nexport default PrivateRoute;"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AACnD,SAASC,WAAW,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGT,UAAU,CAACG,WAAW,CAAC;EAElD,IAAIM,OAAO,EAAE;IACX;IACA,oBAAOJ,OAAA;MAAAK,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;;EAEA;EACA;EACA,OAAON,KAAK,gBAAGH,OAAA,CAACH,MAAM;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,gBAAGT,OAAA,CAACJ,QAAQ;IAACc,EAAE,EAAC;EAAQ;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACtD,CAAC;AAACP,EAAA,CAXID,YAAY;AAAAU,EAAA,GAAZV,YAAY;AAalB,eAAeA,YAAY;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}